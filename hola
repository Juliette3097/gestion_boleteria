-- 1. Crear departamentos y municipios
CREATE TABLE IF NOT EXISTS departamentos (
  Id_Departamento INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre VARCHAR(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE IF NOT EXISTS municipios (
  Id_Municipio INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre VARCHAR(200) NOT NULL,
  departamentoId_Departamento INT NOT NULL,
  FOREIGN KEY (departamentoId_Departamento) REFERENCES departamentos(Id_Departamento)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 2. Asegurar auto-increment en tablas existentes (si no están)
ALTER TABLE artistas MODIFY Id_Artistas INT NOT NULL AUTO_INCREMENT;
ALTER TABLE boletas MODIFY Id_Boletas INT NOT NULL AUTO_INCREMENT;
ALTER TABLE compra MODIFY Id_Compra INT NOT NULL AUTO_INCREMENT;
ALTER TABLE localidades MODIFY Id_Localidades INT NOT NULL AUTO_INCREMENT;
ALTER TABLE rol MODIFY Id_Rol INT NOT NULL AUTO_INCREMENT;
ALTER TABLE usuarios MODIFY Id_Usuarios INT NOT NULL AUTO_INCREMENT;
ALTER TABLE eventos MODIFY Id_Eventos INT NOT NULL AUTO_INCREMENT;

-- 3. Añadir relación evento -> municipio (nuevo campo)
ALTER TABLE eventos
  ADD COLUMN municipioId_Municipio INT NULL AFTER Fecha_fin,
  ADD CONSTRAINT fk_eventos_municipio FOREIGN KEY (municipioId_Municipio) REFERENCES municipios(Id_Municipio);

-- 4. (Opcional) Mejoras de nombres: usar utf8mb4 y long text para descripción si lo deseas
ALTER TABLE eventos MODIFY Descripcion TEXT;






// server.js
const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql2/promise');
const cors = require('cors');

const app = express();
app.use(cors({ origin: 'http://localhost:3000', credentials: true }));
app.use(bodyParser.json());

const db = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'gestion_eventos'
};

const handleDbError = (err, res) => {
  console.error(err);
  res.status(500).json({ success: false, message: 'Error interno' });
};

/* -------------------- EVENTOS (RF1) -------------------- */

// Crear evento (RF1)
app.post('/api/eventos', async (req, res) => {
  const { Nombre, Descripcion, Fecha_inicio, Hora_inicio, Fecha_fin, Hora_fin, municipioId_Municipio } = req.body;
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [result] = await conn.execute(
      `INSERT INTO eventos (Nombre, Descripcion, Fecha_inicio, Hora_inicio, Fecha_fin, Hora_fin, municipioId_Municipio)
       VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [Nombre, Descripcion, Fecha_inicio, Hora_inicio, Fecha_fin, Hora_fin, municipioId_Municipio || null]
    );
    res.json({ success: true, id: result.insertId });
  } catch (err) {
    handleDbError(err, res);
  } finally { if (conn) await conn.end(); }
});

// Listar todos
app.get('/api/eventos', async (req, res) => {
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [rows] = await conn.execute('SELECT * FROM eventos ORDER BY Fecha_inicio DESC');
    res.json({ success: true, data: rows });
  } catch (err) { handleDbError(err, res); } finally { if (conn) await conn.end(); }
});

// Obtener 1
app.get('/api/eventos/:id', async (req, res) => {
  const id = req.params.id;
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [rows] = await conn.execute('SELECT * FROM eventos WHERE Id_Eventos = ?', [id]);
    res.json({ success: true, data: rows[0] || null });
  } catch (err) { handleDbError(err, res); } finally { if (conn) await conn.end(); }
});

// Actualizar
app.put('/api/eventos/:id', async (req, res) => {
  const id = req.params.id;
  const { Nombre, Descripcion, Fecha_inicio, Hora_inicio, Fecha_fin, Hora_fin, municipioId_Municipio } = req.body;
  let conn;
  try {
    conn = await mysql.createConnection(db);
    await conn.execute(
      `UPDATE eventos SET Nombre=?, Descripcion=?, Fecha_inicio=?, Hora_inicio=?, Fecha_fin=?, Hora_fin=?, municipioId_Municipio=? WHERE Id_Eventos=?`,
      [Nombre, Descripcion, Fecha_inicio, Hora_inicio, Fecha_fin, Hora_fin, municipioId_Municipio || null, id]
    );
    res.json({ success: true });
  } catch (err) { handleDbError(err, res); } finally { if (conn) await conn.end(); }
});

// Borrar
app.delete('/api/eventos/:id', async (req,res) => {
  const id = req.params.id;
  let conn;
  try {
    conn = await mysql.createConnection(db);
    await conn.execute('DELETE FROM eventos WHERE Id_Eventos = ?', [id]);
    res.json({ success: true });
  } catch (err) { handleDbError(err, res); } finally { if (conn) await conn.end(); }
});

/* -------------------- LOCALIDADES (RF3) -------------------- */
app.post('/api/localidades', async (req, res) => {
  const { Tipo_localidad, Valor_localidad, Column, eventosId_Eventos } = req.body;
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [r] = await conn.execute(
      `INSERT INTO localidades (Tipo_localidad, Valor_localidad, Column, eventosId_Eventos) VALUES (?, ?, ?, ?)`,
      [Tipo_localidad, Valor_localidad, Column || 0, eventosId_Eventos]
    );
    res.json({ success: true, id: r.insertId });
  } catch (err) { handleDbError(err,res); } finally { if (conn) await conn.end(); }
});

app.get('/api/localidades', async (req, res) => {
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [rows] = await conn.execute('SELECT * FROM localidades');
    res.json({ success: true, data: rows });
  } catch (err) { handleDbError(err,res); } finally { if (conn) await conn.end(); }
});

/* -------------------- ARTISTAS (RF4) -------------------- */
app.post('/api/artistas', async (req,res) => {
  const { Nombre, Genero_musical, Ciudad_origen } = req.body;
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [r] = await conn.execute(
      `INSERT INTO artistas (Nombre, Genero_musical, Ciudad_origen) VALUES (?, ?, ?)`,
      [Nombre, Genero_musical, Ciudad_origen]
    );
    res.json({ success: true, id: r.insertId });
  } catch (err) { handleDbError(err,res); } finally { if (conn) await conn.end(); }
});

app.get('/api/artistas', async (req,res) => {
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [rows] = await conn.execute('SELECT * FROM artistas');
    res.json({ success: true, data: rows });
  } catch (err) { handleDbError(err,res); } finally { if (conn) await conn.end(); }
});

/* -------------------- BOLETAS (RF2) -------------------- */
/*
  Para RF2: la boletería debe existir por evento + localidad + valor + cantidad
  Aquí un endpoint para crear boleta y otro para consultarlas.
*/
app.post('/api/boletas', async (req, res) => {
  const { Valor, Serial, Disponibilidad, Cantidad, eventosId_Eventos } = req.body;
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [r] = await conn.execute(
      `INSERT INTO boletas (Valor, Serial, Disponibilidad, Cantidad, eventosId_Eventos, compraId_Compra)
       VALUES (?, ?, ?, ?, ?, NULL)`,
      [Valor, Serial || null, Disponibilidad || 'disponible', Cantidad || 0, eventosId_Eventos]
    );
    res.json({ success: true, id: r.insertId });
  } catch (err) { handleDbError(err,res); } finally { if (conn) await conn.end(); }
});

app.get('/api/boletas', async (req, res) => {
  let conn;
  try {
    conn = await mysql.createConnection(db);
    const [rows] = await conn.execute('SELECT * FROM boletas');
    res.json({ success: true, data: rows });
  } catch (err) { handleDbError(err,res); } finally { if (conn) await conn.end(); }
});

/* -------------------- RF5: BUSCAR EVENTOS por fecha, municipio o departamento --------------------
   Respuesta: nombre, descripción, artistas, horarios y boletas disponibles por localidad.
   Query params: fecha (YYYY-MM-DD), municipio (Id_Municipio or name), departamento (Id_Departamento or name)
*/
app.get('/api/buscar-eventos', async (req, res) => {
  const { fecha, municipio, departamento } = req.query;
  let filters = [];
  let params = [];
  if (fecha) {
    filters.push(' (e.Fecha_inicio <= ? AND e.Fecha_fin >= ?)');
    params.push(fecha, fecha);
  }
  if (municipio) {
    // accept numeric id or name
    if (!isNaN(Number(municipio))) {
      filters.push(' e.municipioId_Municipio = ? ');
      params.push(Number(municipio));
    } else {
      filters.push(' m.Nombre LIKE ? ');
      params.push(`%${municipio}%`);
    }
  }
  if (departamento) {
    if (!isNaN(Number(departamento))) {
      filters.push(' d.Id_Departamento = ? ');
      params.push(Number(departamento));
    } else {
      filters.push(' d.Nombre LIKE ? ');
      params.push(`%${departamento}%`);
    }
  }

  let whereClause = filters.length ? 'WHERE ' + filters.join(' AND ') : '';

  let conn;
  try {
    conn = await mysql.createConnection(db);

    // 1) obtener eventos con municipios y departamentos
    const queryEventos = `
      SELECT e.Id_Eventos, e.Nombre, e.Descripcion, e.Fecha_inicio, e.Hora_inicio, e.Fecha_fin, e.Hora_fin,
             m.Id_Municipio, m.Nombre AS MunicipioNombre,
             d.Id_Departamento, d.Nombre AS DepartamentoNombre
      FROM eventos e
      LEFT JOIN municipios m ON e.municipioId_Municipio = m.Id_Municipio
      LEFT JOIN departamentos d ON m.departamentoId_Departamento = d.Id_Departamento
      ${whereClause}
      ORDER BY e.Fecha_inicio DESC
    `;
    const [eventos] = await conn.execute(queryEventos, params);

    // 2) por cada evento obtener artistas (via entity8) y boletas por localidad
    const results = [];
    for (let ev of eventos) {
      // artistas
      const [artistas] = await conn.execute(
        `SELECT a.Id_Artistas, a.Nombre, a.Genero_musical, a.Ciudad_origen
         FROM entity8 en
         JOIN artistas a ON en.artistasId_Artistas = a.Id_Artistas
         WHERE en.eventosId_Eventos = ?`, [ev.Id_Eventos]
      );

      // localidades y boletas por localidad
      const [localidades] = await conn.execute(
        `SELECT l.Id_Localidades, l.Tipo_localidad, l.Valor_localidad, l.Column,
                IFNULL(b.Cantidad, 0) AS boletas_cantidad, b.Id_Boletas, b.Disponibilidad, b.Valor AS ValorBoleta
         FROM localidades l
         LEFT JOIN boletas b ON b.eventosId_Eventos = l.eventosId_Eventos
           AND b.eventosId_Eventos = ?
           -- (si fuera necesario relacionar boletas a localidades, habría que tener un campo localidadesId en boletas)
         WHERE l.eventosId_Eventos = ?`, [ev.Id_Eventos, ev.Id_Eventos]
      );

      results.push({
        evento: ev,
        artistas,
        localidades
      });
    }

    res.json({ success: true, data: results });
  } catch (err) {
    handleDbError(err, res);
  } finally { if (conn) await conn.end(); }
});

app.listen(5000, () => console.log('Servidor escuchando en :5000'));







ALTER TABLE boletas ADD COLUMN localidadId_Localidades INT NULL AFTER eventosId_Eventos;
ALTER TABLE boletas ADD CONSTRAINT fk_boletas_localidad FOREIGN KEY (localidadId_Localidades) REFERENCES localidades(Id_Localidades);




// EventForm.jsx
import React, { useState } from 'react';

export default function EventForm({ onCreated }) {
  const [form, setForm] = useState({
    Nombre: '', Descripcion: '', Fecha_inicio: '', Hora_inicio: '',
    Fecha_fin: '', Hora_fin: '', municipioId_Municipio: ''
  });

  const handleChange = (e) => setForm({...form, [e.target.name]: e.target.value});

  const submit = async (e) => {
    e.preventDefault();
    const res = await fetch('http://localhost:5000/api/eventos', {
      method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify(form)
    });
    const data = await res.json();
    if (data.success) {
      alert('Evento creado');
      onCreated && onCreated();
      setForm({Nombre:'',Descripcion:'',Fecha_inicio:'',Hora_inicio:'',Fecha_fin:'',Hora_fin:'', municipioId_Municipio:''});
    } else alert('Error');
  };

  return (
    <form onSubmit={submit}>
      <input name="Nombre" value={form.Nombre} onChange={handleChange} placeholder="Nombre" required />
      <input name="Descripcion" value={form.Descripcion} onChange={handleChange} placeholder="Descripcion" required />
      <input type="date" name="Fecha_inicio" value={form.Fecha_inicio} onChange={handleChange} required />
      <input type="time" name="Hora_inicio" value={form.Hora_inicio} onChange={handleChange} required />
      <input type="date" name="Fecha_fin" value={form.Fecha_fin} onChange={handleChange} required />
      <input type="time" name="Hora_fin" value={form.Hora_fin} onChange={handleChange} required />
      <input name="municipioId_Municipio" value={form.municipioId_Municipio} onChange={handleChange} placeholder="Id municipio (opcional)"/>
      <button type="submit">Crear evento</button>
    </form>
  );
}




// LocalidadForm.jsx
import React, { useState } from 'react';
export function LocalidadForm({ onCreated }) {
  const [f, setF] = useState({Tipo_localidad:'', Valor_localidad:'', Column:0, eventosId_Eventos:''});
  const submit = async (e) => {
    e.preventDefault();
    const r = await fetch('http://localhost:5000/api/localidades', {
      method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(f)
    });
    const data = await r.json();
    if (data.success) { onCreated && onCreated(); setF({Tipo_localidad:'',Valor_localidad:'',Column:0,eventosId_Eventos:''}); }
  };
  return (
    <form onSubmit={submit}>
      <input placeholder="Tipo" name="Tipo_localidad" value={f.Tipo_localidad} onChange={e=>setF({...f,Tipo_localidad:e.target.value})} required/>
      <input type="number" placeholder="Valor" name="Valor_localidad" value={f.Valor_localidad} onChange={e=>setF({...f,Valor_localidad:e.target.value})} required/>
      <input type="number" placeholder="Column" name="Column" value={f.Column} onChange={e=>setF({...f,Column:e.target.value})}/>
      <input placeholder="Id Evento" name="eventosId_Eventos" value={f.eventosId_Eventos} onChange={e=>setF({...f,eventosId_Eventos:e.target.value})} required/>
      <button>Crear localidad</button>
    </form>
  );
}

// ArtistaForm.jsx
import React, { useState } from 'react';
export function ArtistaForm({ onCreated }) {
  const [f, setF] = useState({Nombre:'',Genero_musical:'',Ciudad_origen:''});
  const submit = async e => {
    e.preventDefault();
    const r = await fetch('http://localhost:5000/api/artistas', {
      method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(f)
    });
    const data = await r.json();
    if (data.success) { onCreated && onCreated(); setF({Nombre:'',Genero_musical:'',Ciudad_origen:''}); }
  };
  return (
    <form onSubmit={submit}>
      <input placeholder="Nombre" value={f.Nombre} onChange={e=>setF({...f,Nombre:e.target.value})} required/>
      <input placeholder="Genero" value={f.Genero_musical} onChange={e=>setF({...f,Genero_musical:e.target.value})}/>
      <input placeholder="Ciudad origen" value={f.Ciudad_origen} onChange={e=>setF({...f,Ciudad_origen:e.target.value})}/>
      <button>Crear artista</button>
    </form>
  );
}





// BoletaForm.jsx
import React, { useState } from 'react';
export default function BoletaForm({ onCreated }) {
  const [f, setF] = useState({Valor:'', Serial:'', Disponibilidad:'disponible', Cantidad:0, eventosId_Eventos:'', localidadId_Localidades:''});
  const submit = async e => {
    e.preventDefault();
    const payload = {...f};
    // si añadiste localidadId en boletas, inclúyelo; si no, borra el campo
    const res = await fetch('http://localhost:5000/api/boletas', {
      method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)
    });
    const data = await res.json();
    if (data.success) { onCreated && onCreated(); setF({Valor:'',Serial:'',Disponibilidad:'disponible',Cantidad:0,eventosId_Eventos:'',localidadId_Localidades:''}); }
  };
  return (
    <form onSubmit={submit}>
      <input placeholder="Valor" value={f.Valor} onChange={e=>setF({...f,Valor:e.target.value})} required/>
      <input placeholder="Cantidad" type="number" value={f.Cantidad} onChange={e=>setF({...f,Cantidad:e.target.value})} />
      <input placeholder="Id Evento" value={f.eventosId_Eventos} onChange={e=>setF({...f,eventosId_Eventos:e.target.value})} required/>
      <input placeholder="Id Localidad (opcional)" value={f.localidadId_Localidades} onChange={e=>setF({...f,localidadId_Localidades:e.target.value})}/>
      <button>Crear boletas</button>
    </form>
  );
}




// BuscarEventos.jsx
import React, { useState } from 'react';

export default function BuscarEventos() {
  const [fecha, setFecha] = useState('');
  const [municipio, setMunicipio] = useState('');
  const [departamento, setDepartamento] = useState('');
  const [resultados, setResultados] = useState([]);

  const buscar = async () => {
    const params = new URLSearchParams();
    if (fecha) params.append('fecha', fecha);
    if (municipio) params.append('municipio', municipio);
    if (departamento) params.append('departamento', departamento);
    const res = await fetch('http://localhost:5000/api/buscar-eventos?' + params.toString());
    const data = await res.json();
    if (data.success) setResultados(data.data);
    else alert('Error al buscar');
  };

  return (
    <div>
      <h3>Buscar eventos</h3>
      <input type="date" value={fecha} onChange={e=>setFecha(e.target.value)} />
      <input placeholder="Municipio (id o nombre)" value={municipio} onChange={e=>setMunicipio(e.target.value)} />
      <input placeholder="Departamento (id o nombre)" value={departamento} onChange={e=>setDepartamento(e.target.value)} />
      <button onClick={buscar}>Buscar</button>

      <div>
        {resultados.map((r,idx) => (
          <div key={idx} style={{border:'1px solid #ccc', padding:8, marginTop:8}}>
            <h4>{r.evento.Nombre} ({r.evento.Fecha_inicio} {r.evento.Hora_inicio} - {r.evento.Fecha_fin} {r.evento.Hora_fin})</h4>
            <p>{r.evento.Descripcion}</p>
            <p><b>Municipio:</b> {r.evento.MunicipioNombre || 'N/A'} - <b>Departamento:</b> {r.evento.DepartamentoNombre || 'N/A'}</p>
            <p><b>Artistas:</b> {r.artistas.length ? r.artistas.map(a => a.Nombre).join(', ') : 'Sin artistas'}</p>
            <div>
              <b>Localidades / Boletas:</b>
              {r.localidades.length ? (
                <ul>
                  {r.localidades.map(l => (
                    <li key={l.Id_Localidades}>
                      {l.Tipo_localidad} — Valor: {l.Valor_localidad} — Boletas: {l.boletas_cantidad || 0} — Disponibilidad: {l.Disponibilidad || 'N/A'}
                    </li>
                  ))}
                </ul>
              ) : <p>No hay localidades</p>}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}







