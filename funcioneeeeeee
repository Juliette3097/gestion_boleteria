const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql2/promise');
const app = express();
const session = require('express-session');
const cors = require('cors');

app.use(cors({
  origin: 'http://localhost:3000',
  credentials: true
}));

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
  secret: 'clave-ultra-secretaa',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false, sameSite: 'lax' }
}));

// Configuración base de datos
const db = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'gestion_eventos'
};

const handleDbError = (error, res) => {
  console.error('Error de base de datos:', error);
  res.status(500).json({
    success: false,
    message: 'Error interno del servidor'
  });
};

// ============= CRUD: EVENTOS =============

// Agregar evento
app.post('/api/agregar-evento', async (req, res) => {
  const { nombre, descripcion, fecha_inicio, hora_inicio, fecha_fin, hora_fin } = req.body;
  if (!nombre || !descripcion) return res.json({ success: false, message: 'Faltan campos obligatorios' });

  let connection;
  try {
    connection = await mysql.createConnection(db);
    await connection.execute(
      `INSERT INTO eventos (Nombre, Descripcion, Fecha_inicio, Hora_inicio, Fecha_fin, Hora_fin) VALUES (?, ?, ?, ?, ?, ?)`,
      [nombre, descripcion, fecha_inicio, hora_inicio, fecha_fin, hora_fin]
    );
    res.json({ success: true, message: 'Evento agregado correctamente' });
  } catch (error) {
    handleDbError(error, res);
  } finally {
    if (connection) await connection.end();
  }
});

// Obtener todos los eventos
app.get('/api/todos-eventos', async (req, res) => {
  let connection;
  try {
    connection = await mysql.createConnection(db);
    const [eventos] = await connection.execute('SELECT * FROM eventos');
    res.json({ success: true, data: eventos });
  } catch (error) {
    handleDbError(error, res);
  } finally {
    if (connection) await connection.end();
  }
});

// ============= CRUD: ARTISTAS =============

// Agregar artista
app.post('/api/agregar-artista', async (req, res) => {
  const { nombre, genero_musical, ciudad_origen } = req.body;
  if (!nombre || !genero_musical) return res.json({ success: false, message: 'Faltan campos obligatorios' });

  let connection;
  try {
    connection = await mysql.createConnection(db);
    await connection.execute(
      `INSERT INTO artistas (Nombre, Genero_musical, Ciudad_origen) VALUES (?, ?, ?)`,
      [nombre, genero_musical, ciudad_origen]
    );
    res.json({ success: true, message: 'Artista agregado correctamente' });
  } catch (error) {
    handleDbError(error, res);
  } finally {
    if (connection) await connection.end();
  }
});

// Obtener todos los artistas
app.get('/api/todos-artistas', async (req, res) => {
  let connection;
  try {
    connection = await mysql.createConnection(db);
    const [artistas] = await connection.execute('SELECT * FROM artistas');
    res.json({ success: true, data: artistas });
  } catch (error) {
    handleDbError(error, res);
  } finally {
    if (connection) await connection.end();
  }
});

// ============= CRUD: LOCALIDADES =============

// Agregar localidad
app.post('/api/agregar-localidad', async (req, res) => {
  const { tipo_localidad, valor_localidad, evento_id } = req.body;
  if (!tipo_localidad || !valor_localidad || !evento_id) return res.json({ success: false, message: 'Faltan campos' });

  let connection;
  try {
    connection = await mysql.createConnection(db);
    await connection.execute(
      `INSERT INTO localidades (Tipo_localidad, Valor_localidad, eventosId_Eventos, \`Column\`) VALUES (?, ?, ?, 0)`,
      [tipo_localidad, valor_localidad, evento_id]
    );
    res.json({ success: true, message: 'Localidad agregada correctamente' });
  } catch (error) {
    handleDbError(error, res);
  } finally {
    if (connection) await connection.end();
  }
});

// Obtener todas las localidades
app.get('/api/todas-localidades', async (req, res) => {
  let connection;
  try {
    connection = await mysql.createConnection(db);
    const [localidades] = await connection.execute('SELECT * FROM localidades');
    res.json({ success: true, data: localidades });
  } catch (error) {
    handleDbError(error, res);
  } finally {
    if (connection) await connection.end();
  }
});

app.listen(5000, () => console.log('✅ Servidor corriendo en http://localhost:5000'));


import React, { useEffect, useState } from 'react';
import SideBar from '../Componentes/SideBar';
import '../Css/Usuario.css';

function Usuario() {
  const [eventos, setEventos] = useState([]);
  const [localidades, setLocalidades] = useState([]);
  const [artistas, setArtistas] = useState([]);

  const [nuevoEvento, setNuevoEvento] = useState({
    nombre: '',
    descripcion: '',
    fecha_inicio: '',
    hora_inicio: '',
    fecha_fin: '',
    hora_fin: ''
  });

  const [nuevoArtista, setNuevoArtista] = useState({
    nombre: '',
    genero_musical: '',
    ciudad_origen: ''
  });

  const [nuevaLocalidad, setNuevaLocalidad] = useState({
    tipo_localidad: '',
    valor_localidad: '',
    evento_id: ''
  });

  const cargarDatos = () => {
    fetch('http://localhost:5000/api/todos-eventos').then(res => res.json()).then(data => setEventos(data.data || []));
    fetch('http://localhost:5000/api/todas-localidades').then(res => res.json()).then(data => setLocalidades(data.data || []));
    fetch('http://localhost:5000/api/todos-artistas').then(res => res.json()).then(data => setArtistas(data.data || []));
  };

  useEffect(() => { cargarDatos(); }, []);

  const handleChange = (e, setState) => setState(prev => ({ ...prev, [e.target.name]: e.target.value }));

  const enviarDatos = (url, datos) => {
    fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(datos)
    })
      .then(res => res.json())
      .then(data => {
        alert(data.message);
        if (data.success) cargarDatos();
      });
  };

  return (
    <>
      <SideBar />
      <h2 className="titulo1">Registro de Eventos, Localidades y Artistas</h2>

      {/* Formulario Evento */}
      <h3>Agregar Evento</h3>
      <form onSubmit={e => { e.preventDefault(); enviarDatos('http://localhost:5000/api/agregar-evento', nuevoEvento); }}>
        <input name="nombre" placeholder="Nombre" onChange={e => handleChange(e, setNuevoEvento)} required />
        <input name="descripcion" placeholder="Descripción" onChange={e => handleChange(e, setNuevoEvento)} required />
        <input type="date" name="fecha_inicio" onChange={e => handleChange(e, setNuevoEvento)} required />
        <input type="time" name="hora_inicio" onChange={e => handleChange(e, setNuevoEvento)} required />
        <input type="date" name="fecha_fin" onChange={e => handleChange(e, setNuevoEvento)} required />
        <input type="time" name="hora_fin" onChange={e => handleChange(e, setNuevoEvento)} required />
        <button type="submit">Agregar Evento</button>
      </form>

      {/* Formulario Artista */}
      <h3>Agregar Artista</h3>
      <form onSubmit={e => { e.preventDefault(); enviarDatos('http://localhost:5000/api/agregar-artista', nuevoArtista); }}>
        <input name="nombre" placeholder="Nombre del artista" onChange={e => handleChange(e, setNuevoArtista)} required />
        <input name="genero_musical" placeholder="Género musical" onChange={e => handleChange(e, setNuevoArtista)} required />
        <input name="ciudad_origen" placeholder="Ciudad de origen" onChange={e => handleChange(e, setNuevoArtista)} required />
        <button type="submit">Agregar Artista</button>
      </form>

      {/* Formulario Localidad */}
      <h3>Agregar Localidad</h3>
      <form onSubmit={e => { e.preventDefault(); enviarDatos('http://localhost:5000/api/agregar-localidad', nuevaLocalidad); }}>
        <input name="tipo_localidad" placeholder="Tipo de localidad" onChange={e => handleChange(e, setNuevaLocalidad)} required />
        <input name="valor_localidad" type="number" placeholder="Valor" onChange={e => handleChange(e, setNuevaLocalidad)} required />
        <select name="evento_id" onChange={e => handleChange(e, setNuevaLocalidad)} required>
          <option value="">Seleccionar evento</option>
          {eventos.map(e => <option key={e.Id_Eventos} value={e.Id_Eventos}>{e.Nombre}</option>)}
        </select>
        <button type="submit">Agregar Localidad</button>
      </form>

      {/* Tablas de datos */}
      <h2>Eventos Registrados</h2>
      <table border="1">
        <thead>
          <tr><th>ID</th><th>Nombre</th><th>Descripción</th><th>Inicio</th><th>Fin</th></tr>
        </thead>
        <tbody>
          {eventos.map(e => (
            <tr key={e.Id_Eventos}>
              <td>{e.Id_Eventos}</td>
              <td>{e.Nombre}</td>
              <td>{e.Descripcion}</td>
              <td>{e.Fecha_inicio} {e.Hora_inicio}</td>
              <td>{e.Fecha_fin} {e.Hora_fin}</td>
            </tr>
          ))}
        </tbody>
      </table>

      <h2>Artistas Registrados</h2>
      <table border="1">
        <thead>
          <tr><th>ID</th><th>Nombre</th><th>Género</th><th>Ciudad</th></tr>
        </thead>
        <tbody>
          {artistas.map(a => (
            <tr key={a.Id_Artistas}>
              <td>{a.Id_Artistas}</td>
              <td>{a.Nombre}</td>
              <td>{a.Genero_musical}</td>
              <td>{a.Ciudad_origen}</td>
            </tr>
          ))}
        </tbody>
      </table>

      <h2>Localidades Registradas</h2>
      <table border="1">
        <thead>
          <tr><th>ID</th><th>Tipo</th><th>Valor</th><th>Evento</th></tr>
        </thead>
        <tbody>
          {localidades.map(l => (
            <tr key={l.Id_Localidades}>
              <td>{l.Id_Localidades}</td>
              <td>{l.Tipo_localidad}</td>
              <td>{l.Valor_localidad}</td>
              <td>{l.eventosId_Eventos}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
}

export default Usuario;
