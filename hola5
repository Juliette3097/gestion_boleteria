import React, { useEffect, useState } from 'react';
import SideBar from '../Componentes/SideBar';
import { useNavigate } from 'react-router-dom';
import '../Css/Usuario.css';

function Usuario() {
  const [eventos, setEventos] = useState([]);
  const [localidades, setLocalidades] = useState([]);
  const [artistas, setArtistas] = useState([]);

  const [nuevoEvento, setNuevoEvento] = useState({});
  const [nuevaLocalidad, setNuevaLocalidad] = useState({});
  const [nuevoArtista, setNuevoArtista] = useState({});

  const navigate = useNavigate();

  // ====== CARGAR DATOS ======
  const cargarEventos = () => {
    fetch('http://localhost:5000/api/todos-eventos')
      .then(res => res.json())
      .then(data => data.success ? setEventos(data.data) : console.error('Error eventos:', data.message))
      .catch(err => console.error(err));
  };

  const cargarLocalidades = () => {
    fetch('http://localhost:5000/api/todas-localidades')
      .then(res => res.json())
      .then(data => data.success ? setLocalidades(data.data) : console.error('Error localidades:', data.message))
      .catch(err => console.error(err));
  };

  const cargarArtistas = () => {
    fetch('http://localhost:5000/api/todos-artistas')
      .then(res => res.json())
      .then(data => data.success ? setArtistas(data.data) : console.error('Error artistas:', data.message))
      .catch(err => console.error(err));
  };

  useEffect(() => {
    cargarEventos();
    cargarLocalidades();
    cargarArtistas();
  }, []);

  // ====== AGREGAR DATOS ======
  const agregarEvento = (e) => {
    e.preventDefault();
    fetch('http://localhost:5000/api/agregar-evento', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(nuevoEvento)
    })
      .then(res => res.json())
      .then(data => {
        alert(data.message);
        cargarEventos();
      });
  };

  const agregarLocalidad = (e) => {
    e.preventDefault();
    fetch('http://localhost:5000/api/agregar-localidad', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(nuevaLocalidad)
    })
      .then(res => res.json())
      .then(data => {
        alert(data.message);
        cargarLocalidades();
      });
  };

  const agregarArtista = (e) => {
    e.preventDefault();
    fetch('http://localhost:5000/api/agregar-artista', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(nuevoArtista)
    })
      .then(res => res.json())
      .then(data => {
        alert(data.message);
        cargarArtistas();
      });
  };

  return (
    <>
      <SideBar />
      <h2 className="titulo1">Registro de Eventos</h2>

      {/* === FORMULARIO EVENTO === */}
      <form className="formulario" onSubmit={agregarEvento}>
        <input placeholder="Nombre" onChange={(e) => setNuevoEvento({ ...nuevoEvento, nombre: e.target.value })} />
        <input placeholder="Descripción" onChange={(e) => setNuevoEvento({ ...nuevoEvento, descripcion: e.target.value })} />
        <input type="date" onChange={(e) => setNuevoEvento({ ...nuevoEvento, fecha_inicio: e.target.value })} />
        <input type="time" onChange={(e) => setNuevoEvento({ ...nuevoEvento, hora_inicio: e.target.value })} />
        <input type="date" onChange={(e) => setNuevoEvento({ ...nuevoEvento, fecha_fin: e.target.value })} />
        <input type="time" onChange={(e) => setNuevoEvento({ ...nuevoEvento, hora_fin: e.target.value })} />
        <button>Agregar Evento</button>
      </form>

      {/* === TABLA EVENTOS === */}
      <table className="tabla_eventos" border="1" cellPadding="5">
        <thead>
          <tr>
            <th>ID</th><th>Nombre</th><th>Descripción</th><th>Inicio</th><th>Fin</th>
          </tr>
        </thead>
        <tbody>
          {eventos.length > 0 ? eventos.map(e => (
            <tr key={e.Id_Eventos}>
              <td>{e.Id_Eventos}</td>
              <td>{e.Nombre}</td>
              <td>{e.Descripcion}</td>
              <td>{e.Fecha_inicio} {e.Hora_inicio}</td>
              <td>{e.Fecha_fin} {e.Hora_fin}</td>
            </tr>
          )) : <tr><td colSpan="5">No hay eventos</td></tr>}
        </tbody>
      </table>

      {/* === FORMULARIO LOCALIDAD === */}
      <h2 className="text-local">Registrar Localidad</h2>
      <form className="formulario" onSubmit={agregarLocalidad}>
        <input placeholder="Tipo de localidad" onChange={(e) => setNuevaLocalidad({ ...nuevaLocalidad, tipo: e.target.value })} />
        <input placeholder="Valor" type="number" onChange={(e) => setNuevaLocalidad({ ...nuevaLocalidad, valor: e.target.value })} />
        <input placeholder="ID del evento" type="number" onChange={(e) => setNuevaLocalidad({ ...nuevaLocalidad, evento_id: e.target.value })} />
        <button>Agregar Localidad</button>
      </form>

      <table className="tabla_localidad" border="1" cellPadding="5">
        <thead>
          <tr><th>ID</th><th>Tipo</th><th>Valor</th><th>Evento</th></tr>
        </thead>
        <tbody>
          {localidades.length > 0 ? localidades.map(l => (
            <tr key={l.Id_Localidades}>
              <td>{l.Id_Localidades}</td><td>{l.Tipo_localidad}</td><td>{l.Valor_localidad}</td><td>{l.eventosId_Eventos}</td>
            </tr>
          )) : <tr><td colSpan="4">No hay localidades</td></tr>}
        </tbody>
      </table>

      {/* === FORMULARIO ARTISTA === */}
      <h2 className="text-local">Registrar Artista</h2>
      <form className="formulario" onSubmit={agregarArtista}>
        <input placeholder="Nombre completo" onChange={(e) => setNuevoArtista({ ...nuevoArtista, nombre: e.target.value })} />
        <input placeholder="Género musical" onChange={(e) => setNuevoArtista({ ...nuevoArtista, genero: e.target.value })} />
        <input placeholder="Ciudad origen" onChange={(e) => setNuevoArtista({ ...nuevoArtista, ciudad: e.target.value })} />
        <button>Agregar Artista</button>
      </form>

      <table className="tabla_artista" border="1" cellPadding="5">
        <thead>
          <tr><th>ID</th><th>Nombre</th><th>Género</th><th>Ciudad</th></tr>
        </thead>
        <tbody>
          {artistas.length > 0 ? artistas.map(a => (
            <tr key={a.Id_Artistas}>
              <td>{a.Id_Artistas}</td><td>{a.Nombre}</td><td>{a.Genero_musical}</td><td>{a.Ciudad_origen}</td>
            </tr>
          )) : <tr><td colSpan="4">No hay artistas</td></tr>}
        </tbody>
      </table>
    </>
  );
}

export default Usuario;
